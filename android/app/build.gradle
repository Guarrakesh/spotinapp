apply plugin: "com.android.application"

import com.android.build.OutputFile
import com.google.gms.googleservices.GoogleServicesPlugin



project.ext.react = [
    entryFile: "index.js"
]

apply from: "../../node_modules/react-native/react.gradle"
apply from: "../../node_modules/react-native-code-push/android/codepush.gradle"

project.ext.envConfigFiles = [
    debug: ".env.dev",
    release: ".env.prod",
    releaseStaging: ".env.staging",
]
apply from: project(':react-native-config').projectDir.getPath() + "/dotenv.gradle"

def _ext = rootProject.ext
def _googlePlayServicesVersion = _ext.has('googlePlayServicesVersion') ? _ext.googlePlayServicesVersion : '+'

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {
    configurations.all {

        resolutionStrategy {
                force 'com.google.code.findbugs:jsr305:+'
                force 'com.google.android.gms:play-services-gcm:16.1.0'
                force 'com.google.android.gms:play-services-base:16.1.0'

                force 'com.google.firebase:firebase-core:16.0.6'
                force 'com.google.firebase:firebase-messaging:17.6.0'
            }
    }
    compileSdkVersion rootProject.ext.compileSdkVersion

    compileOptions {
         sourceCompatibility JavaVersion.VERSION_1_8
         targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "it.spotin"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 13
        versionName "0.6.3"
        multiDexEnabled true

        resValue "string", "build_config_package", "it.spotin"
    }
    signingConfigs {
            release {
                if (project.hasProperty('SPOTIN_RELEASE_STORE_FILE')) {
                    storeFile file(SPOTIN_RELEASE_STORE_FILE)
                    storePassword SPOTIN_RELEASE_STORE_PASSWORD
                    keyAlias SPOTIN_RELEASE_KEY_ALIAS
                    keyPassword SPOTIN_RELEASE_KEY_PASSWORD
                }
            }
        }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86-64"
        }
    }
    buildTypes {
        release {
            minifyEnabled enableProguardInReleaseBuilds
            buildConfigField "String", "CODEPUSH_KEY", '"aoetyyAdwgh5FbL35ecwdeYbxOrCH1MqxDijX"'
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            signingConfig signingConfigs.release
        }
        debug {
            applicationIdSuffix ".debug"
            buildConfigField "String", "CODEPUSH_KEY", '""'
        }
        releaseStaging {
            initWith(buildTypes.release)
            buildConfigField "String", "CODEPUSH_KEY", '"aoetyyAdwgh5FbL35ecwdeYbxOrCH1MqxDijX"' //uKbCzUIlgyIcbA6tph80iusE28jpSkitxPjjQ
            applicationIdSuffix ".staging"
            matchingFallbacks = ['release', 'debug']
        }

    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2, "arm64-v8a": 3, "x86-64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    implementation project(':react-native-android-location-enabler')
    compile project(':react-native-image-resizer')
    compile project(':react-native-image-picker')
    compile project(':react-native-vector-icons')
    compile project(':react-native-svg')
    compile project(':react-native-push-notification')
    compile project(':react-native-maps')
    compile project(':react-native-geolocation-service')
    compile project(':react-native-firebase')
    compile project(':react-native-fbsdk')
    compile project(':react-native-device-info')
    compile project(':react-native-config')
    compile project(':react-native-code-push')
    compile project(':react-native-android-open-settings')
    compile project(':appcenter-push')
    compile project(':appcenter-crashes')
    compile project(':appcenter-analytics')
    compile project(':appcenter')

    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    implementation "com.facebook.react:react-native:+"  // From node_modules


    implementation project(':react-native-code-push')
    implementation project(':react-native-code-push')
    implementation project(':react-native-image-resizer')
    implementation project(':react-native-image-picker')

    implementation project(':react-native-firebase')

    implementation project(':react-native-push-notification')

    implementation project(':react-native-config')
    implementation project(':react-native-device-info')
    implementation project(':react-native-android-open-settings')
    implementation project(':react-native-code-push')
    implementation project(':react-native-vector-icons')
    implementation project(':react-native-svg')
    implementation project(':react-native-maps')
    implementation project(':react-native-fbsdk')
    implementation project(':react-native-geolocation-service')
    implementation  "com.google.android.gms:play-services-base:16.1.0"
    implementation 'com.facebook.android:facebook-login:+'
    implementation 'com.google.firebase:firebase-core:17.6'
    implementation "com.google.firebase:firebase-messaging:16.0"
    implementation 'me.leolin:ShortcutBadger:1.1.21@aar'

}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply plugin: 'com.google.gms.google-services'
GoogleServicesPlugin.config.disableVersionCheck = true
